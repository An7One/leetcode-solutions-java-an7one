@author: Leon
References:
    https://github.com/huanminwu/LeetCode



### Prefix
# Prefix Sum

3   0325    https://leetcode.com/problems/maximum-size-subarray-sum-equals-k/
3   0437    https://leetcode.com/problems/path-sum-iii/
3   0454    https://leetcode.com/problems/4sum-ii/
3   0523    https://leetcode.com/problems/continuous-subarray-sum/
3   0525    https://leetcode.com/problems/contiguous-array/
3   0548    https://leetcode.com/problems/split-array-with-equal-sum/
3   0560    https://leetcode.com/problems/subarray-sum-equals-k/
3   0974    https://leetcode.com/problems/subarray-sums-divisible-by-k/
3   1031    https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/
3   1171    https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list/

4   0410    https://leetcode.com/problems/split-array-largest-sum/
4   0689    https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays/
4   1124    https://leetcode.com/problems/longest-well-performing-interval/
4   1292    https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/
4   1477    https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/

6   1000    https://leetcode.com/problems/minimum-cost-to-merge-stones/



Resource:
store previous sum and the times of this sum, because sum[i, j] = sum[0, j] - sum[0, i - 1], this is a very very important idea
https://leetcode.com/problems/binary-subarrays-with-sum/discuss/187005/3-ways-to-solve-this-kind-of-problem.

about preSum.put(0, 1);
https://leetcode.com/problems/subarray-sum-equals-k/discuss/102106/Java-Solution-PreSum-+-HashMap/416171
https://leetcode.com/problems/subarray-sum-equals-k/discuss/102106/Java-Solution-PreSum-+-HashMap/238328